# -*- coding: utf-8 -*-
"""openweaver_week3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18uc-bGoVynTZRB2EnBIdc0tDbPSKEP1H

1. Write a program implementing an image processing pipeline using Python and OpenCV to remove noise from image.
"""

import cv2
from google.colab.patches import cv2_imshow

def remove_noise(image_path):
    # Read the image
    image = cv2.imread(image_path)

    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply Gaussian blur to reduce noise
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # Apply adaptive thresholding to create a binary image
    thresholded = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 2)

    # Apply morphological operations to further remove noise
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
    opened = cv2.morphologyEx(thresholded, cv2.MORPH_OPEN, kernel)

    # Convert the processed image back to BGR color space
    processed_image = cv2.cvtColor(opened, cv2.COLOR_GRAY2BGR)

    # Display the original and processed images
    cv2_imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    cv2_imshow(processed_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# Example usage
image_path = "/openimage.jpg"
remove_noise(image_path)

import cv2

"""2. Write a program that reads an image, converts its color space from BGR to RGB, and transforms it between NumPy array and PIL Image object representations, so that the same can be used for filtering, enhancement, or analysis.


"""

import cv2
import numpy as np
from PIL import Image
from google.colab.patches import cv2_imshow

def convert_image(image_path):
    # Read the image using OpenCV
    bgr_image = cv2.imread(image_path)

    # Convert BGR image to RGB
    rgb_image = cv2.cvtColor(bgr_image, cv2.COLOR_BGR2RGB)

    # Convert RGB image to NumPy array representation
    numpy_array = np.array(rgb_image)

    # Convert NumPy array to PIL Image object
    pil_image = Image.fromarray(numpy_array)

    # Perform some image operations using PIL
    # For example, convert the image to grayscale
    gray_image = pil_image.convert("L")

    # Convert PIL Image object back to NumPy array
    numpy_array_modified = np.array(gray_image)

    # Convert NumPy array to BGR image
    bgr_image_modified = cv2.cvtColor(numpy_array_modified, cv2.COLOR_GRAY2BGR)

    # Display the original and modified images
    cv2_imshow(cv2.cvtColor(bgr_image, cv2.COLOR_BGR2RGB))
    cv2_imshow(cv2.cvtColor(bgr_image_modified, cv2.COLOR_BGR2RGB))

# Example usage
image_path = "/openimage.jpg"
convert_image(image_path)

"""3. Write a program that reads an image, and converts its color space to HSV, applies color-based filtering to identify brown areas, and then changes the color of those areas to red. The resulting image highlights the regions that were detected as brown."""

import cv2
import numpy as np
from PIL import Image
from google.colab.patches import cv2_imshow

def highlight_brown_areas(image_path):
    # Read the image
    image = cv2.imread(image_path)

    # Convert the image to RGB color space
    rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Convert the RGB image to PIL Image object
    pil_image = Image.fromarray(rgb_image)

    # Convert the PIL Image object to HSV color space
    hsv_image = pil_image.convert("HSV")

    # Define lower and upper bounds for brown color in HSV
    lower_brown = np.array([10, 50, 50])
    upper_brown = np.array([30, 255, 255])

    # Create a mask based on the defined brown color range
    mask = cv2.inRange(np.array(hsv_image), lower_brown, upper_brown)

    # Change the color of brown areas to red
    modified_image = np.array(rgb_image)
    modified_image[np.where(mask)] = [255, 0, 0]

    # Display the original and modified images
    cv2_imshow(cv2.cvtColor(rgb_image, cv2.COLOR_RGB2BGR))
    cv2_imshow(cv2.cvtColor(modified_image, cv2.COLOR_RGB2BGR))


image_path = "/download.jpg"
highlight_brown_areas(image_path)

